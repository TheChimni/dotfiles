" Basics
set background=dark 
" solarized options 
let g:solarized_termcolors=256 
let g:solarized_visibility="high" 
let g:solarized_contrast="high" 
"colorscheme solarized 
":color xoria256
colorscheme xoria256
:let mapleader=','
:set guifont=Monaco:h14
":set cursorline
:set hidden
:set noerrorbells
:set history=1000
:set undolevels=1000
:set title
:set guioptions=aAce

" TODO: Need to put some more stuff in here

" Control TAB to toggle through open buffers
let g:LustyJugglerAltTabMode = 1

noremap <silent> <C-TAB> :LustyJuggler<CR>
noremap <silent> <leader>j :LustyJuggler<CR>
map <silent> <F4> :LustyJugglePrevious<CR> :bd #<CR>

" Toggle NERDTree with leader-n and close it automatically after opening a file
map <leader>n :NERDTreeToggle<CR>
let NERDTreeQuitOnOpen = 1

" Simpler window navigation
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" jj or jk as a faster alternative to Escape
:imap jj <Esc>
:imap jk <Esc>

" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬,nbsp:.,extends:.,precedes:.
set nolist
let g:surround_35 = "#{\r}"

" Key-mappings for Ack plugin
nmap g/ :Ack<space>
nmap g* :Ack -w <C-R><C-W><space>

" ctrlp plugin
let g:ctrlp_map = '<leader>t'
nnoremap <leader>g :CtrlPMRU<CR>

function! GetBufferList()
  redir =>buflist
  silent! ls
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
      echohl ErrorMsg
      echo "Location List is Empty."
      return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction

nmap <silent> <leader>l :call ToggleList("Location List", 'l')<CR>
nmap <silent> <leader>e :call ToggleList("Quickfix List", 'c')<CR>

" ctags
nmap <F8> :TagbarToggle<CR>
nmap <leader>a :TagbarToggle<CR>

" CoffeeTags
let g:tagbar_autoclose = 1
if executable('coffeetags')
  let g:tagbar_type_coffee = {
        \ 'ctagsbin' : 'coffeetags',
        \ 'ctagsargs' : '',
        \ 'kinds' : [
        \ 'f:functions',
        \ 'o:object',
        \ ],
        \ 'sro' : ".",
        \ 'kind2scope' : {
        \ 'f' : 'object',
        \ 'o' : 'object',
        \ }
        \ }
endif
